set nocompatible

" Automatic reloading of .nvimrc
autocmd! bufwritepost nvimrc source %

" Enable syntax highlighting
syntax on

" Turn off filetype detection
filetype off

" Plugins {{{
call plug#begin('~/.config/nvim/plugged')

" Molokai colorscheme
Plug 'tomasr/molokai'

" Quick navigation for files/folders in current folder
Plug 'scrooloose/nerdtree'

" Easy managing for snippets
Plug 'SirVer/ultisnips'

" Fuzzy finder for files and buffers
Plug 'ctrlpvim/ctrlp.vim'

" Python mode plugin for better indention, autocomplete etc
Plug 'klen/python-mode', {'branch': 'develop'}

" Sexy status bar like powerline with themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Asynchronous maker and linter
Plug 'benekastah/neomake'

" Vimwiki for easy notes and todo lists
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

call plug#end()
" }}}

" Turn on filetype plugin detection and indent files
filetype plugin indent on

" Colors {{{
" Set dark background
set background=dark
" Set colorscheme to molokai
colorscheme molokai
hi Search cterm=bold ctermfg=black ctermbg=green
" }}}

" Mapping {{{
" Set mapleader to comma
let mapleader = ','
let g:mapleader = ','

" Bind Ctrl + [h,j,k,l] for quick window movement
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" Easy sorting of selected lines
vnoremap <Leader>s :sort<CR>

" Better indenting of code block
vnoremap < <gv
vnoremap > >gv

" Remove trailing spaces
nmap <Leader><space> :%s/\s\+$<cr>

" Put parenthesis, quote marks around selected text
vnoremap <Leader>ap xi()<Esc>P
vnoremap <Leader>aq xi""<Esc>P

" Scroll faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" Map double Escape to switch from terminal to normal mode
tnoremap <esc><esc> <c-\><c-n>

" Escape also clear search highlight
nnoremap <Esc> :nohl<cr>
imap <Esc> <Esc>:nohl<cr>

" }}}

" Settings {{{
" PyMode {{{
" Turn off code folding from python-mode
let g:pymode_folding = 0
" Turn off python-mode breakpoints
let g:pymode_breakpoint = 0
" Turn off python-mode code checking
let g:pymode_lint = 1
" Turn off python-mode rope
let g:pymode_rope = 1
" }}}

" NERDTree {{{
" NERDTree should ignore Python binary files
let NERDTreeIgnore = ['\.pyc$', '\.gch$']
" Close NERDTree after file is opened
let g:NERDTreeQuitOnOpen=1
" Show hidden files
let NERDTreeShowHidden=1
" Map <Leader>x to open NERDTree file explorer
nnoremap <Leader>x :NERDTreeToggle<CR>
inoremap <Leader>x <Esc>:NERDTreeToggle<CR>
" }}}

" UltiSnips {{{
" Vertical split for UltiSnips edit window
let g:UltiSnipsEditSplit = 'vertical'
" Use snippet folder in dev directory
let g:UltiSnipsSnippetsDir = '~/.config/nvim/UltiSnips/'
" Use tab as trigger and for jumps
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}}

" CtrlP {{{
" Order matching files top to bottom
let g:ctrlp_match_window = 'bottom,order:ttb'
" Set Silver Searcher as search command
let g:ctrlp_user_command = 'ag %s -l --nocolor --path-to-ignore=$HOME/.config/agignore --hidden -g ""'
" CtrlP tags
nnoremap <Leader>z :CtrlPTag<cr>
" }}}

" AirLine {{{
" Turn on powerline fonts for airline
let g:airline_powerline_fonts = 1
" Set theme for airline
let g:airline_theme = 'powerlineish'
" Display all buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" }}}

" Neomake {{{
autocmd! BufWritePost * Neomake
let g:neomake_python_flake8_maker = {
    \ 'args': ['--ignore=E302', '--max-line-length=85'],
    \ }
let g:neomake_cpp_gcc_maker = {
    \ 'args': ['-I./includes/', '-std=c++11'],
    \ }
" }}}

" Vimwiki {{{
let g:vimwiki_customwiki2html = $HOME.'/.config/nvim/plugged/vimwiki/autoload/vimwiki/customwiki2html.sh'
let private_wiki = {}
let private_wiki.path = '~/vimwiki/source/'
let private_wiki.path_html = '~/vimwiki/html/'
let private_wiki.auto_export = 1
let private_wiki.css_file = '~/vimwiki/templates/style.css'
let private_wiki.template_path = '~/vimwiki/templates/'
let private_wiki.template_default = 'default_template'
let private_wiki.template_ext = '.html'

let g:vimwiki_list = [private_wiki]
" }}}

" Relative numbering {{{
" Set relative numbers with current line number on cursor line
set relativenumber
set number
" Switch to absolute numbers in Insert mode
autocmd InsertEnter * set number norelativenumber
" Switch back to relative numbers in Normal mode
autocmd InsertLeave * set number relativenumber
" }}}

" Persistent undo {{{
" It remember changes after file is closed
set undofile
set undodir=~/.vim/undo
set undolevels=1000
set undoreload=10000
" }}}

" Misc {{{
" Make files should use tabs instead of spaces
autocmd FileType make setlocal noexpandtab

" Set tab to result in 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Set smartindent so after newline cursor is at right place
set smartindent

" Ignores case
set ignorecase

" Highlight searched word
set incsearch

" Always show status bar
set laststatus=2

" Reload file if it was changed
set autoread

" Show options for command complete above
set wildmenu

" Show vertical line on 85 column
set colorcolumn=85

" Show incomplete command ("+y)
set showcmd

" 'h' and 'l' move to next line when hit wrap
set whichwrap=<,>,h,l

" Wrap long line based on 'breakat' instead of last character that fit
set linebreak

" Automatic set terminal title
set title

" Highlight current cursor line
set cursorline

" Keep 10 lines above or below when scroll
set scrolloff=10

" Keep 1 line left or right when scroll
set sidescrolloff=1

" Set up directory for swap and backup files
set backupdir=~/.nvim-tmp,/tmp
set directory=~/.nvim-tmp,/tmp

" Use spell checking
set spell spelllang=cs,en_us

" Highlight matched parentheses with light blue background
highlight MatchParen cterm=bold ctermbg=none ctermfg=magenta

" Highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red
au BufWinEnter * match ExtraWhitespace /\s\+$/

" Show trailing whitespace as dot
" Show tab character as >-
set list
set listchars=trail:Â·,tab:>-

" Set backspace behavior
set backspace=indent,eol,start

" Equal sizes of splits when window resize
au VimResized * :wincmd =

" Disable mouse
set mouse=

" Use modeline specified in file
set modelines=1

" Use tags from .git directory
set tags+=.git/tags
set notagrelative
" }}}

" vim:foldmethod=marker:foldlevel=0
