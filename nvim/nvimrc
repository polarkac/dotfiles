set nocompatible

" Automatic reloading of .nvimrc
autocmd! bufwritepost nvimrc source %

" Enable syntax highlighting
syntax on

" Turn off filetype detection
filetype off

" Plugins {{{
call plug#begin('~/.config/nvim/plugged')

" Solarized colorscheme
Plug 'shaunsingh/solarized.nvim'

" Quick navigation for files/folders in current folder
Plug 'scrooloose/nerdtree'

" Easy managing for snippets
Plug 'SirVer/ultisnips'

" Fuzzy finder for files and buffers
Plug 'ctrlpvim/ctrlp.vim'

" Autocomplete
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'

" Python mode plugin for better indention, autocomplete etc
" Plug 'klen/python-mode', {'branch': 'develop'}

" Sexy status bar like powerline with themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Nvim LSP
Plug 'neovim/nvim-lspconfig'

" FZF
Plug 'junegunn/fzf.vim'

" Vimwiki
Plug 'vimwiki/vimwiki'

call plug#end()
" }}}

" Turn on filetype plugin detection and indent files
filetype plugin indent on

" Colors {{{
" Set light background
set background=light
" Set colorscheme to solarized
colorscheme solarized

highlight DiagnosticHint ctermfg=12
" }}}

" Mapping {{{
" Set mapleader to comma
let mapleader = ','
let g:mapleader = ','

" Bind Ctrl + [h,j,k,l] for quick window movement
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" Easy sorting of selected lines
vnoremap <Leader>s :sort<CR>

" Better indenting of code block
vnoremap < <gv
vnoremap > >gv

" Remove trailing spaces
nmap <Leader><space> :%s/\s\+$<cr>

" Put parenthesis, quote marks around selected text
vnoremap <Leader>ap xi()<Esc>P
vnoremap <Leader>aq xi""<Esc>P

" Scroll faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" Map double Escape to switch from terminal to normal mode
tnoremap <esc><esc> <c-\><c-n>

" Escape also clear search highlight
nnoremap <Esc> :nohl<cr>
imap <Esc> <Esc>:nohl<cr>

" Replace Ctrl + n autocomplete with omnifunc
inoremap <c-n> <c-x><c-o>

" Use Ag for fzf.vim as fuzzy finder
nnoremap <Leader>fz :Ag<CR>

" Open diagnostic window
nnoremap <Leader>dl :lua vim.diagnostic.open_float()<cr>
nnoremap <Leader>da :lua vim.diagnostic.open_float(0, { scope = 'buffer' })<cr>

" }}}

" Settings {{{

" NERDTree {{{
" NERDTree should ignore Python binary files
let NERDTreeIgnore = ['\.pyc$', '\.gch$']
" Close NERDTree after file is opened
let g:NERDTreeQuitOnOpen=1
" Show hidden files
let NERDTreeShowHidden=1
" Map <Leader>x to open NERDTree file explorer
nnoremap <Leader>x :NERDTreeToggle<CR>
inoremap <Leader>x <Esc>:NERDTreeToggle<CR>
" }}}

" UltiSnips {{{
" Vertical split for UltiSnips edit window
let g:UltiSnipsEditSplit = 'vertical'
" Use snippet folder in dev directory
let g:UltiSnipsSnippetsDir = '~/.config/nvim/UltiSnips/'
" Use tab as trigger and for jumps
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}}

" CtrlP {{{
" Order matching files top to bottom
let g:ctrlp_match_window = 'bottom,order:ttb'
" Set Silver Searcher as search command
let g:ctrlp_user_command = 'ag %s -l --nocolor --path-to-ignore=$HOME/.config/agignore --hidden -g ""'
" CtrlP tags
nnoremap <Leader>z :CtrlPTag<cr>
" }}}

" AirLine {{{
" Turn on powerline fonts for airline
let g:airline_powerline_fonts = 1
" Set theme for airline
let g:airline_theme = 'solarized'
" Display all buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" }}}

" Vimwiki {{{
let notes_wiki = {}
let notes_wiki.path = '~/Mega/Wiki/notes/'

let g:vimwiki_list = [notes_wiki]
" }}}

" LSP {{{
lua <<EOF
vim.diagnostic.config({ virtual_text = true })
local capabilities = require('cmp_nvim_lsp').default_capabilities()
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<Leader>df', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '<Leader>dn', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<Leader>dp', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', '<Leader>dl', vim.diagnostic.setloclist, opts)
local on_attach = function(client, bufnr)
    -- Mappings.
    local opts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', '<Leader>gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', '<Leader>gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', '<Leader>gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<Leader>gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<Leader>cc', vim.lsp.buf.rename, opts)
    vim.keymap.set('n', '<Leader>h', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', '<Leader>ff', vim.lsp.buf.format, opts)
end

vim.lsp.enable('pylsp')
vim.lsp.config('pylsp', {
    on_attach = on_attach,
    capabilities = capabilities,
    settings = {
        pylsp = {
            plugins = {
                pycodestyle = {
                    ignore = {"E302", "E305", "W503"}
                }
            }
        }
    }
})

vim.lsp.enable('html')
vim.lsp.config('html', {
    on_attach = on_attach,
    capabilities = capabilities,
    cmd = {"vscode-html-languageserver", "--stdio"},
    filetypes = {"html", "htmldjango"},
})

vim.lsp.enable('cssls')
vim.lsp.config('cssls', {
    on_attach = on_attach,
    capabilities = capabilities,
    cmd = {"vscode-css-languageserver", "--stdio"},
})

vim.lsp.enable('jsonls')
vim.lsp.config('jsonls', {
    on_attach = on_attach,
    capabilities = capabilities,
    cmd = {"vscode-json-languageserver", "--stdio"},
})

vim.lsp.enable('rust_analyzer')
vim.lsp.config('rust_analyzer', {
    on_attach = on_attach,
    capabilities = capabilities,
    settings = {
        ["rust-analyzer"] = {
            diagnostics = {
                enable = false;
            },
            imports = {
                granularity = {
                    group = "crate",
                },
                prefix = "crate",
            },
        }
    }
})
EOF
" }}}

" Nvim-cmp {{{
lua <<EOF
local cmp = require('cmp')
cmp.setup{
    snippet = {
        expand = function(args)
            vim.fn["UltiSnips#Anon"](args.body)
        end
    },
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-u>'] = cmp.mapping.scroll_docs(-4),
        ['<C-d>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
    }),
    sources = {
        { name = 'nvim_lsp' },
        { name = 'ultisnips' },
    },
}
EOF
" }}}

" Relative numbering {{{
" Set relative numbers with current line number on cursor line
set relativenumber
set number

" Switch to absolute numbers in Insert mode
autocmd InsertEnter * set number norelativenumber

" Switch back to relative numbers in Normal mode
autocmd InsertLeave * set number relativenumber

" }}}

" Persistent undo {{{
" It remember changes after file is closed
set undofile
set undodir=~/.vim/undo
set undolevels=1000
set undoreload=10000
" }}}

" Misc {{{
" Make files should use tabs instead of spaces
autocmd FileType make setlocal noexpandtab

" Set tab to result in 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Set smartindent so after newline cursor is at right place
set smartindent

" Ignores case
set ignorecase

" Highlight searched word
set incsearch

" Always show status bar
set laststatus=2

" Reload file if it was changed
set autoread

" Show options for command complete above
set wildmenu

" Show just a menu not a preview
set completeopt=menu

" Show vertical line on 80 column
set colorcolumn=80

" Show incomplete command ("+y)
set showcmd

" 'h' and 'l' move to next line when hit wrap
set whichwrap=<,>,h,l

" Wrap long line based on 'breakat' instead of last character that fit
set linebreak

" Automatic set terminal title
set title

" Highlight current cursor line
set cursorline

" Keep 10 lines above or below when scroll
set scrolloff=10

" Keep 1 line left or right when scroll
set sidescrolloff=1

" Set up directory for swap and backup files
set backupdir=~/.nvim-tmp,/tmp
set directory=~/.nvim-tmp,/tmp

" Use spell checking
set spell spelllang=cs,en_us

" Highlight matched parentheses with light blue background
highlight MatchParen cterm=bold ctermbg=none ctermfg=magenta

" Highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red
au BufWinEnter * match ExtraWhitespace /\s\+$/

" Show trailing whitespace as dot
" Show tab character as >-
set list
set listchars=trail:Â·,tab:>-

" Set backspace behavior
set backspace=indent,eol,start

" Equal sizes of splits when window resize
au VimResized * :wincmd =

" Disable mouse
set mouse=

" Use modeline specified in file
set modelines=1

" Use tags from .git directory
set tags+=.git/tags
set notagrelative
" }}}

" Extensions for syntax {{{
au BufNewFile,BufRead *.html set filetype=htmldjango
" }}}

" Custom functions {{{
" }}}

" }}}

" vim:foldmethod=marker:foldlevel=0
